{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class SanitizeHtmlPipe {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n  transform(value) {\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n  static #_ = this.ɵfac = function SanitizeHtmlPipe_Factory(t) {\n    return new (t || SanitizeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"sanitizeHtml\",\n    type: SanitizeHtmlPipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["SanitizeHtmlPipe","constructor","sanitizer","transform","value","bypassSecurityTrustHtml","_","i0","ɵɵdirectiveInject","i1","DomSanitizer","_2","pure"],"sources":["/home/jason21715/Desktop/personal-site/src/app/sanitize-html.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer, SafeHtml } from \"@angular/platform-browser\";\n\n@Pipe({ name: \"sanitizeHtml\" })\nexport class SanitizeHtmlPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(value: string): SafeHtml {\n    return this.sanitizer.bypassSecurityTrustHtml(value);\n  }\n}\n"],"mappings":";;AAIA,OAAM,MAAOA,gBAAgB;EAC3BC,YAAoBC,SAAuB;IAAvB,KAAAA,SAAS,GAATA,SAAS;EAAiB;EAE9CC,SAASA,CAACC,KAAa;IACrB,OAAO,IAAI,CAACF,SAAS,CAACG,uBAAuB,CAACD,KAAK,CAAC;EACtD;EAAC,QAAAE,CAAA,G;qBALUN,gBAAgB,EAAAO,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;;UAAhBX,gBAAgB;IAAAY,IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}